# RPM Macros for packaging Haskell cabalized packages  -*-rpm-spec-*-
# see https://fedoraproject.org/wiki/Packaging:Haskell for more details

# "cabal"
%cabal [ -x Setup ] || ghc --make %{!?ghc_user_conf:-no-user-package-db} %{!?ghc_without_dynamic:-dynamic} Setup\
LANG=en_US.utf8\
./Setup

# check ghc version was rebuilt against self
%ghc_check_bootstrap\
if [ ! "$(ghc --info | grep \\"Booter\\ version\\",\\"%{ghc_version}\\")" ]; then\
  echo "Warning: this ghc build is not self-bootstrapped."\
%if %{undefined ghc_bootstrapping}\
  echo "The ghc package should be rebuilt against its current version before\
proceeding, to avoid dependency ABI breakage from a future ghc rebuild."\
  echo "To override set ghc_bootstrapping."\
  echo "Aborting."\
  exit 1\
%endif\
fi

# no _pkgdocdir in openSUSE
%_pkgdocdir %{_docdir}/%{name}

# configure
%cabal_configure\
%ghc_check_bootstrap\
%global _hardened_ldflags %{nil}\
%if "%{Cabal_version}" == "1.24.1.0" || "%{Cabal_version}" == "1.24.2.0"\
dynlibdir="--dynlibdir=%{_libdir}"\
%endif\
%cabal configure %{?cabal_configure_verbose} --prefix=%{_prefix} --libdir=%{_libdir} --docdir=%{?_pkgdocdir}%{!?_pkgdocdir:%{_docdir}/%{name}-%{version}} --libsubdir='$compiler/$pkgkey' ${dynlibdir} --datasubdir='$pkgid' --ghc %{!?ghc_without_dynamic:--enable-executable-dynamic} %{?with_tests:--enable-tests} %{?cabal_configure_options} $cabal_configure_extra_options

# install
%cabal_install %cabal copy %{?cabal_install_verbose} --destdir=%{buildroot}

# tests
%cabal_test\
%if %{with tests}\
%cabal test %{?cabal_test_verbose}\
%endif

# no _pkgdocdir in EPEL <= 7
%ghc_pkgdocdir %{?_pkgdocdir}%{!?_pkgdocdir:%{_docdir}/%{name}-%{version}}

# root dir for ghc docs (used by ghc.spec)
%ghc_html_dir %{_datadir}/doc/ghc-%{ghc_version}/html
# deprecates
%ghcdocbasedir %{_datadir}/doc/ghc-%{ghc_version}/html

# libraries doc dir (internal)
%ghc_html_libraries_dir %{ghc_html_dir}/libraries
# deprecates
%ghclibdocdir %ghc_html_libraries_dir

# pkg doc dir
%ghc_html_pkg_dir %{ghc_html_libraries_dir}/%{pkg_name}-%{version}
# deprecates
%ghcpkgdocdir %ghc_html_pkg_dir

# top library dir
%ghclibdir %{_libdir}/ghc-%{ghc_version}

%_ghcdynlibdir %(%{_rpmconfigdir}/ghc-dirs.sh %{_libdir} %{pkg_name}-%{version} dynlibdir)

%_ghcpkglibdir %(%{_rpmconfigdir}/ghc-dirs.sh %{_libdir} %{pkg_name}-%{version} pkglibdir)

# compiler version
%ghc_version %{!?ghc_version_override:%(ghc --numeric-version)}%{?ghc_version_override}

%Cabal_version %(ghc-pkg --global --simple-output list Cabal | sed -e "s/Cabal-//")

# create and install package.conf file
# cabal_pkg_conf [name] [version]
%cabal_pkg_conf()\
%define pkgname %{?1}%{!?1:%{pkg_name}}\
%define pkgver %{?2}%{!?2:%{version}}\
%define pkgnamever %{pkgname}-%{pkgver}\
%cabal register --gen-pkg-config\
install -D --mode=0644 %{pkgnamever}.conf %{buildroot}%{ghclibdir}/package.conf.d/%{pkgnamever}.conf\
%{nil}

# ghc_bin_build
%ghc_bin_build\
%cabal_configure\
%cabal build %{_smp_mflags} %{?cabal_build_verbose}

# ghc_lib_build_without_haddock [name] [version]
%ghc_lib_build_without_haddock()\
%cabal_configure %{!?without_prof:-p} %{!?ghc_without_shared:--enable-shared} %{?ghc_without_shared:--disable-shared} %{?pkg_name:--htmldir=%{ghclibdocdir}/%{pkg_name}-%{version}} %{?1:--docdir=%{_docdir}/ghc-%1%{!?fedora:-%2} --htmldir=%{ghclibdocdir}/%1-%2} %{!?1:--global} %{?ghc_with_lib_for_ghci:--enable-library-for-ghci}\
%cabal build %{_smp_mflags} %{?cabal_build_verbose}\
%{nil}

# ghc_lib_build [name] [version]
%ghc_lib_build()\
%ghc_lib_build_without_haddock\
%if %{undefined without_haddock}\
%define pkgname %{?1}%{!?1:%{pkg_name}}\
%define pkgver %{?2}%{!?2:%{version}}\
if [ -f dist/build/libHS%{pkgname}-%{pkgver}.a ]; then\
%cabal haddock %{?cabal_haddock_verbose} --html %{!?without_hscolour:%(if [ -x %{_bindir}/HsColour ]; then echo --hyperlink-source; fi)} --hoogle\
fi\
%endif\
%{nil}

# ghc_strip_dynlinked
%ghc_strip_dynlinked\
%if %{undefined __debug_package}\
find %{buildroot} -type f -exec sh -c "file {} | grep -q 'dynamically linked'" \\; -exec strip "{}" \\;\
%endif

# install bin package
%ghc_bin_install()\
%{!?_fileattrsdir:%global _use_internal_dependency_generator 0}\
%{!?_fileattrsdir:%global __find_requires %{_rpmconfigdir}/ghc-deps.sh %{buildroot}%{ghclibdir}}\
%cabal_install\
%{!?1:%ghc_strip_dynlinked}\
%{nil}

# ghc_lib_install [name] [version]
%ghc_lib_install()\
%{!?_fileattrsdir:%global _use_internal_dependency_generator 0}\
%{!?_fileattrsdir:%global __find_provides %{_rpmconfigdir}/rpmdeps --provides}\
%{!?_fileattrsdir:%global __find_requires %{_rpmconfigdir}/ghc-deps.sh %{buildroot}%{ghclibdir}}\
%cabal_install\
%cabal_pkg_conf\
%{!?1:%ghc_strip_dynlinked}\
%{nil}

# ghc_fix_rpath lib-ver ...
%ghc_fix_rpath()\
%if %{undefined ghc_without_dynamic}\
if ! type chrpath > /dev/null; then exit 1; fi\
PDIR=$(pwd)\
for lib in %*; do\
for i in $(find %{buildroot} -type f -exec sh -c "file {} | grep -q 'dynamically linked'" \\; -print); do\
  if [ -x "$i" ]; then\
    RPATH=$(chrpath $i | sed -e "s@^$i: R.*PATH=@@")\
    case $RPATH in\
         *$PDIR/$lib/*)\
         SYSPATH=$(%{_rpmconfigdir}/ghc-pkg-wrapper %{buildroot}%{ghclibdir} --package-db=%{buildroot}%{ghclibdir}/package.conf.d field $lib library-dirs | uniq)\
         NEWRPATH=$(echo $RPATH | sed -e "s@$PDIR/$lib/dist/build@${SYSPATH}@g")\
         chrpath -r $NEWRPATH $i\
         ;;\
    esac\
  else\
    echo "%%ghc_fix_rpath: no $i executable"\
    exit 1\
  fi\
done\
done\
%endif\
%{nil}

# Deprecated by ghc_fix_rpath:
# ghc_fix_dynamic_rpath prog ...
%ghc_fix_dynamic_rpath()\
%if %{undefined ghc_without_dynamic}\
if ! type chrpath > /dev/null; then exit 1; fi\
PDIR=$(pwd)\
for i in %*; do\
  case $i in\
    /*) PROG=%{buildroot}$i ;;\
    *) PROG=%{buildroot}%{_bindir}/$i ;;\
  esac\
  if [ -x "$PROG" ]; then\
    RPATH=$(chrpath $PROG | sed -e "s@^$PROG: R.*PATH=@@")\
    case $RPATH in\
         *$PDIR*)\
         NEWRPATH=$(echo $RPATH | sed -e "s@$PDIR/dist/build@%{ghclibdir}/%{pkg_name}-%{version}@g")\
         chrpath -r $NEWRPATH $PROG\
         ;;\
    esac\
  else\
    echo "%%ghc_fix_dynamic_rpath: no such file $PROG"\
    exit 1\
  fi\
done\
%endif\
%{nil}

%ghc_pkg_recache %{_bindir}/ghc-pkg-%{ghc_version} recache --no-user-package-db || :

# - without_hscolour, without_testsuite, and ghc_bootstrapping
#   need to be set locally in the spec file

# skip prof libs and documentation
%ghc_bootstrap\
%global without_prof 1\
%global without_haddock 1\
%global without_manual 1
